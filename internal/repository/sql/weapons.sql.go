// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: weapons.sql

package sql

import (
	"context"
	"database/sql"
	"time"
)

const CreateWeapons = `-- name: CreateWeapons :exec
INSERT INTO weapons (weapon_type_id, name, price, weight, acc, str, con, dex, men, wit, critical, magic_attack, magic_speed, power_attack, power_speed)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)
`

type CreateWeaponsParams struct {
	WeaponTypeID sql.NullInt32
	Name         string
	Price        int32
	Weight       int32
	Acc          int32
	Str          int32
	Con          int32
	Dex          int32
	Men          int32
	Wit          int32
	Critical     int32
	MagicAttack  int32
	MagicSpeed   int32
	PowerAttack  int32
	PowerSpeed   int32
}

func (q *Queries) CreateWeapons(ctx context.Context, arg CreateWeaponsParams) error {
	_, err := q.db.Exec(ctx, CreateWeapons,
		arg.WeaponTypeID,
		arg.Name,
		arg.Price,
		arg.Weight,
		arg.Acc,
		arg.Str,
		arg.Con,
		arg.Dex,
		arg.Men,
		arg.Wit,
		arg.Critical,
		arg.MagicAttack,
		arg.MagicSpeed,
		arg.PowerAttack,
		arg.PowerSpeed,
	)
	return err
}

const CreateWeaponsType = `-- name: CreateWeaponsType :exec
INSERT INTO weapons_type (name, description) VALUES ($1, $2)
`

type CreateWeaponsTypeParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateWeaponsType(ctx context.Context, arg CreateWeaponsTypeParams) error {
	_, err := q.db.Exec(ctx, CreateWeaponsType, arg.Name, arg.Description)
	return err
}

const DeleteWeaponsType = `-- name: DeleteWeaponsType :exec
DELETE FROM weapons_type WHERE id = $1
`

func (q *Queries) DeleteWeaponsType(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteWeaponsType, id)
	return err
}

const GetWeaponsTypeByID = `-- name: GetWeaponsTypeByID :one
SELECT id, name, description, updated_at, created_at FROM weapons_type WHERE id = $1
`

func (q *Queries) GetWeaponsTypeByID(ctx context.Context, id int32) (WeaponsType, error) {
	row := q.db.QueryRow(ctx, GetWeaponsTypeByID, id)
	var i WeaponsType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const GetWeaponsTypeByName = `-- name: GetWeaponsTypeByName :one
SELECT id, name, description, updated_at, created_at FROM weapons_type WHERE name = $1
`

func (q *Queries) GetWeaponsTypeByName(ctx context.Context, name string) (WeaponsType, error) {
	row := q.db.QueryRow(ctx, GetWeaponsTypeByName, name)
	var i WeaponsType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const ListWeapons = `-- name: ListWeapons :many
SELECT w.id, weapon_type_id, w.name, price, weight, acc, str, con, dex, men, wit, critical, magic_attack, magic_speed, power_attack, power_speed, w.updated_at, w.created_at, wt.id, wt.name, description, wt.updated_at, wt.created_at, wt.id, wt.name, wt.description FROM weapons w LEFT JOIN weapons_type wt ON w.weapon_type_id = wt.id
`

type ListWeaponsRow struct {
	ID            int32
	WeaponTypeID  sql.NullInt32
	Name          string
	Price         int32
	Weight        int32
	Acc           int32
	Str           int32
	Con           int32
	Dex           int32
	Men           int32
	Wit           int32
	Critical      int32
	MagicAttack   int32
	MagicSpeed    int32
	PowerAttack   int32
	PowerSpeed    int32
	UpdatedAt     time.Time
	CreatedAt     time.Time
	ID_2          sql.NullInt32
	Name_2        sql.NullString
	Description   sql.NullString
	UpdatedAt_2   sql.NullTime
	CreatedAt_2   sql.NullTime
	ID_3          sql.NullInt32
	Name_3        sql.NullString
	Description_2 sql.NullString
}

func (q *Queries) ListWeapons(ctx context.Context) ([]ListWeaponsRow, error) {
	rows, err := q.db.Query(ctx, ListWeapons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListWeaponsRow{}
	for rows.Next() {
		var i ListWeaponsRow
		if err := rows.Scan(
			&i.ID,
			&i.WeaponTypeID,
			&i.Name,
			&i.Price,
			&i.Weight,
			&i.Acc,
			&i.Str,
			&i.Con,
			&i.Dex,
			&i.Men,
			&i.Wit,
			&i.Critical,
			&i.MagicAttack,
			&i.MagicSpeed,
			&i.PowerAttack,
			&i.PowerSpeed,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ID_2,
			&i.Name_2,
			&i.Description,
			&i.UpdatedAt_2,
			&i.CreatedAt_2,
			&i.ID_3,
			&i.Name_3,
			&i.Description_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListWeaponsType = `-- name: ListWeaponsType :many
SELECT id, name, description, updated_at, created_at FROM weapons_type
`

func (q *Queries) ListWeaponsType(ctx context.Context) ([]WeaponsType, error) {
	rows, err := q.db.Query(ctx, ListWeaponsType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WeaponsType{}
	for rows.Next() {
		var i WeaponsType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateWeaponsType = `-- name: UpdateWeaponsType :exec
UPDATE weapons_type SET description = $1 WHERE id = $2
`

type UpdateWeaponsTypeParams struct {
	Description sql.NullString
	ID          int32
}

func (q *Queries) UpdateWeaponsType(ctx context.Context, arg UpdateWeaponsTypeParams) error {
	_, err := q.db.Exec(ctx, UpdateWeaponsType, arg.Description, arg.ID)
	return err
}
